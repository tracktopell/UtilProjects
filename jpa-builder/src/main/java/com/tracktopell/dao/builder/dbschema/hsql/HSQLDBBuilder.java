/*
 * MySQLDBBuilder.java
 *
 */

package com.tracktopell.dao.builder.dbschema.hsql;

import com.tracktopell.dao.builder.dbschema.DBBuilder;
import com.tracktopell.dao.builder.metadata.Column;
import com.tracktopell.dao.builder.metadata.DBTableSet;
import com.tracktopell.dao.builder.metadata.ReferenceTable;
import com.tracktopell.dao.builder.metadata.Table;
import java.io.PrintStream;
import java.util.Iterator;

/**
 *
 * @author tracktopell
 */
public class HSQLDBBuilder extends DBBuilder{
    
    public HSQLDBBuilder() {
    }

    protected void printDefinitionSchema(String schemaName,DBTableSet dbSet,PrintStream out) {
    }

    protected void printDefinitionTable(Table currentTable, PrintStream out) {
        Iterator<Column> it = currentTable.getSortedColumns();
        Column col = null;
        StringBuffer pkBuffer = new StringBuffer("CONSTRAINT ");
        pkBuffer.append("PK_");
        pkBuffer.append(currentTable.getName().toUpperCase());
        pkBuffer.append(" PRIMARY KEY (");
        StringBuffer fkBuffer = new StringBuffer();
        int pkConter=0;
        int colCounter=0;
        int fkCounter=0;
        out.println("CREATE TABLE ${table.name}".replace("${table.name}",currentTable.getName().toUpperCase())+" (");

        for(colCounter=1;it.hasNext();colCounter++) {
            col = it.next();
            out.print("\t");
            out.print(col.getName().toUpperCase());
            out.print("\t\t");
            if(col.getSqlType().equals("varchar")){
                out.print("VARCHAR");
                out.print(" (");
                out.print(col.getScale());                
                out.print(")");                
            } else if(col.getSqlType().toLowerCase().equals("double") ||
                    col.getSqlType().toLowerCase().equals("float") || 
                    col.getSqlType().toLowerCase().equals("numeric")) {
                out.print("DOUBLE");
            } else if(col.getSqlType().toLowerCase().startsWith("int") ||
                    col.getSqlType().toLowerCase().startsWith("tinyint")) {
                out.print("INTEGER");
            } else {
                out.print(col.getSqlType().toUpperCase());
            }
            out.print("\t");
            if(!col.isNullable() || !col.isPrimaryKey()) {
                out.print(" NOT NULL");
            }
            if(col.isAutoIncremment()) {
                out.print(" GENERATED BY DEFAULT AS IDENTITY");
            }
            
            if(col.isPrimaryKey()) {
                pkConter++;
                if(pkConter>1)
                    pkBuffer.append(", ");
                pkBuffer.append("");                
                pkBuffer.append(col.getName().toUpperCase());                
                pkBuffer.append("");
            }

            if(col.isForeignKey()) {
                ReferenceTable rt = currentTable.getFKReferenceTable(col.getName());
                fkCounter++;
                if(fkCounter>1){
                    fkBuffer.append(",\n");
                }
                fkBuffer.append("\tCONSTRAINT FK_");
                fkBuffer.append(currentTable.getName().toUpperCase());
                fkBuffer.append("_");
                fkBuffer.append(fkCounter);
                fkBuffer.append(" FOREIGN KEY (");
                fkBuffer.append(col.getName().toUpperCase());
                fkBuffer.append(")\tREFERENCES ");
                fkBuffer.append(rt.getTableName().toUpperCase());
                fkBuffer.append("(");
                fkBuffer.append(rt.getColumnName().toUpperCase());
                fkBuffer.append(")");
            }
            out.println(",");
        }
        pkBuffer.append(")");
        
        out.print("\t");
        if(pkConter>0){
            out.print(pkBuffer);
            out.println(",");
        }
        if(fkCounter>0){
            out.print(fkBuffer);
            out.println("");
        }
        out.println(");");
        out.println("-- ===============================================================================");
    }
    /**
     * prints the alter talble for add constraints
     */
    protected void printAddPKContraints(Table currentTable, PrintStream out) {
    }
    /**
     * prints the alter talble for add constraints
     */
    protected void printAddFKContraints(Table currentTable, PrintStream out) {
                
    }

    @Override
    protected void printAddIndexes(Table currentTable, PrintStream out) {       
    }
}
